name: Build and Push Clash Custom Image

on:
  push:
    branches: [ "main" ] # 当向 main 分支推送代码时触发（例如修改了 Dockerfile）
    paths:
      - 'Dockerfile' # 仅当 Dockerfile 发生变化时才触发
  workflow_dispatch: # 允许你手动从 GitHub Actions 界面触发此工作流
  schedule: # 定时触发：每天凌晨0点（UTC）运行
    - cron: '0 0 * * *'

env:
  REGISTRY: ghcr.io # 使用 GitHub Container Registry
  # 镜像名称将是 ghcr.io/<你的GitHub用户名>/<你的仓库名>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # 推送镜像到 GHCR 需要此权限

    steps:
      - name: Checkout repository # 检出你的仓库代码
        uses: actions/checkout@v4

      - name: Log in to the Container registry # 登录到 GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # GitHub 自动提供的 Token

      - name: Extract metadata (tags, labels) for Docker # 为 Docker 镜像生成标签和元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest # 添加 'latest' 标签
            type=sha,enable=true,prefix= # 添加基于 commit SHA 的标签

      - name: Build and push Docker image # 构建并推送 Docker 镜像
        uses: docker/build-push-action@v5
        with:
          context: . # Dockerfile 所在的上下文路径
          push: true
          tags: ${{ steps.meta.outputs.tags }} # 使用上一步生成的标签
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha # 启用 GitHub Actions 缓存来加速构建
          cache-to: type=gha,mode=max # 将构建缓存上传到 GitHub Actions 缓存
